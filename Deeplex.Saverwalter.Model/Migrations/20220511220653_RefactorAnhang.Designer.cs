// <auto-generated />
using System;
using Deeplex.Saverwalter.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Deeplex.Saverwalter.Model.Migrations
{
    [DbContext(typeof(SaverwalterContext))]
    [Migration("20220511220653_RefactorAnhang")]
    partial class RefactorAnhang
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("AdresseAnhang", b =>
                {
                    b.Property<int>("AdressenAdresseId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("AnhaengeAnhangId")
                        .HasColumnType("TEXT");

                    b.HasKey("AdressenAdresseId", "AnhaengeAnhangId");

                    b.HasIndex("AnhaengeAnhangId");

                    b.ToTable("AdresseAnhang");
                });

            modelBuilder.Entity("AnhangBetriebskostenrechnung", b =>
                {
                    b.Property<Guid>("AnhaengeAnhangId")
                        .HasColumnType("TEXT");

                    b.Property<int>("BetriebskostenrechnungenBetriebskostenrechnungId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnhaengeAnhangId", "BetriebskostenrechnungenBetriebskostenrechnungId");

                    b.HasIndex("BetriebskostenrechnungenBetriebskostenrechnungId");

                    b.ToTable("AnhangBetriebskostenrechnung");
                });

            modelBuilder.Entity("AnhangErhaltungsaufwendung", b =>
                {
                    b.Property<Guid>("AnhaengeAnhangId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ErhaltungsaufwendungenErhaltungsaufwendungId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnhaengeAnhangId", "ErhaltungsaufwendungenErhaltungsaufwendungId");

                    b.HasIndex("ErhaltungsaufwendungenErhaltungsaufwendungId");

                    b.ToTable("AnhangErhaltungsaufwendung");
                });

            modelBuilder.Entity("AnhangGarage", b =>
                {
                    b.Property<Guid>("AnhaengeAnhangId")
                        .HasColumnType("TEXT");

                    b.Property<int>("GaragenGarageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnhaengeAnhangId", "GaragenGarageId");

                    b.HasIndex("GaragenGarageId");

                    b.ToTable("AnhangGarage");
                });

            modelBuilder.Entity("AnhangJuristischePerson", b =>
                {
                    b.Property<Guid>("AnhaengeAnhangId")
                        .HasColumnType("TEXT");

                    b.Property<int>("JuristischePersonenJuristischePersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnhaengeAnhangId", "JuristischePersonenJuristischePersonId");

                    b.HasIndex("JuristischePersonenJuristischePersonId");

                    b.ToTable("AnhangJuristischePerson");
                });

            modelBuilder.Entity("AnhangKonto", b =>
                {
                    b.Property<Guid>("AnhaengeAnhangId")
                        .HasColumnType("TEXT");

                    b.Property<int>("KontenKontoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnhaengeAnhangId", "KontenKontoId");

                    b.HasIndex("KontenKontoId");

                    b.ToTable("AnhangKonto");
                });

            modelBuilder.Entity("AnhangMietMinderung", b =>
                {
                    b.Property<Guid>("AnhaengeAnhangId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MietminderungenMietMinderungId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnhaengeAnhangId", "MietminderungenMietMinderungId");

                    b.HasIndex("MietminderungenMietMinderungId");

                    b.ToTable("AnhangMietMinderung");
                });

            modelBuilder.Entity("AnhangMiete", b =>
                {
                    b.Property<Guid>("AnhaengeAnhangId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MietenMieteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnhaengeAnhangId", "MietenMieteId");

                    b.HasIndex("MietenMieteId");

                    b.ToTable("AnhangMiete");
                });

            modelBuilder.Entity("AnhangNatuerlichePerson", b =>
                {
                    b.Property<Guid>("AnhaengeAnhangId")
                        .HasColumnType("TEXT");

                    b.Property<int>("NatuerlichePersonenNatuerlichePersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnhaengeAnhangId", "NatuerlichePersonenNatuerlichePersonId");

                    b.HasIndex("NatuerlichePersonenNatuerlichePersonId");

                    b.ToTable("AnhangNatuerlichePerson");
                });

            modelBuilder.Entity("AnhangVertrag", b =>
                {
                    b.Property<Guid>("AnhaengeAnhangId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Vertraegerowid")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnhaengeAnhangId", "Vertraegerowid");

                    b.HasIndex("Vertraegerowid");

                    b.ToTable("AnhangVertrag");
                });

            modelBuilder.Entity("AnhangVertragsBetriebskostenrechnung", b =>
                {
                    b.Property<Guid>("AnhaengeAnhangId")
                        .HasColumnType("TEXT");

                    b.Property<int>("VertragsBetriebskostenrechnungenVertragsBetriebskostenrechnungId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnhaengeAnhangId", "VertragsBetriebskostenrechnungenVertragsBetriebskostenrechnungId");

                    b.HasIndex("VertragsBetriebskostenrechnungenVertragsBetriebskostenrechnungId");

                    b.ToTable("AnhangVertragsBetriebskostenrechnung");
                });

            modelBuilder.Entity("AnhangWohnung", b =>
                {
                    b.Property<Guid>("AnhaengeAnhangId")
                        .HasColumnType("TEXT");

                    b.Property<int>("WohnungenWohnungId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnhaengeAnhangId", "WohnungenWohnungId");

                    b.HasIndex("WohnungenWohnungId");

                    b.ToTable("AnhangWohnung");
                });

            modelBuilder.Entity("AnhangZaehler", b =>
                {
                    b.Property<Guid>("AnhaengeAnhangId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ZaehlerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnhaengeAnhangId", "ZaehlerId");

                    b.HasIndex("ZaehlerId");

                    b.ToTable("AnhangZaehler");
                });

            modelBuilder.Entity("AnhangZaehlerstand", b =>
                {
                    b.Property<Guid>("AnhaengeAnhangId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ZaehlerstaendeZaehlerstandId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnhaengeAnhangId", "ZaehlerstaendeZaehlerstandId");

                    b.HasIndex("ZaehlerstaendeZaehlerstandId");

                    b.ToTable("AnhangZaehlerstand");
                });

            modelBuilder.Entity("BetriebskostenrechnungWohnung", b =>
                {
                    b.Property<int>("BetriebskostenrechnungenBetriebskostenrechnungId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WohnungenWohnungId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BetriebskostenrechnungenBetriebskostenrechnungId", "WohnungenWohnungId");

                    b.HasIndex("WohnungenWohnungId");

                    b.ToTable("BetriebskostenrechnungWohnung");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Adresse", b =>
                {
                    b.Property<int>("AdresseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hausnummer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notiz")
                        .HasColumnType("TEXT");

                    b.Property<string>("Postleitzahl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Stadt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Strasse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AdresseId");

                    b.ToTable("Adressen");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Anhang", b =>
                {
                    b.Property<Guid>("AnhangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Sha256Hash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("AnhangId");

                    b.ToTable("Anhaenge");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Betriebskostenrechnung", b =>
                {
                    b.Property<int>("BetriebskostenrechnungId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("TEXT");

                    b.Property<double>("Betrag")
                        .HasColumnType("REAL");

                    b.Property<int>("BetreffendesJahr")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("TEXT");

                    b.Property<double?>("HKVO_P7")
                        .HasColumnType("REAL");

                    b.Property<double?>("HKVO_P8")
                        .HasColumnType("REAL");

                    b.Property<int?>("HKVO_P9")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notiz")
                        .HasColumnType("TEXT");

                    b.Property<int>("Schluessel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Typ")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ZaehlerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BetriebskostenrechnungId");

                    b.HasIndex("ZaehlerId");

                    b.ToTable("Betriebskostenrechnungen");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Erhaltungsaufwendung", b =>
                {
                    b.Property<int>("ErhaltungsaufwendungId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("AusstellerId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Betrag")
                        .HasColumnType("REAL");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notiz")
                        .HasColumnType("TEXT");

                    b.Property<int>("WohnungId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ErhaltungsaufwendungId");

                    b.HasIndex("WohnungId");

                    b.ToTable("Erhaltungsaufwendungen");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Garage", b =>
                {
                    b.Property<int>("GarageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdresseId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("BesitzerId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("JuristischePersonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Kennung")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notiz")
                        .HasColumnType("TEXT");

                    b.HasKey("GarageId");

                    b.HasIndex("AdresseId");

                    b.HasIndex("JuristischePersonId");

                    b.ToTable("Garagen");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.JuristischePerson", b =>
                {
                    b.Property<int>("JuristischePersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdresseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Anrede")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fax")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobil")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notiz")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefon")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isHandwerker")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isMieter")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isVermieter")
                        .HasColumnType("INTEGER");

                    b.HasKey("JuristischePersonId");

                    b.HasAlternateKey("PersonId");

                    b.HasIndex("AdresseId");

                    b.ToTable("JuristischePersonen");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Konto", b =>
                {
                    b.Property<int>("KontoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notiz")
                        .HasColumnType("TEXT");

                    b.HasKey("KontoId");

                    b.ToTable("Kontos");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.MietMinderung", b =>
                {
                    b.Property<int>("MietMinderungId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Beginn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Ende")
                        .HasColumnType("TEXT");

                    b.Property<double>("Minderung")
                        .HasColumnType("REAL");

                    b.Property<string>("Notiz")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VertragId")
                        .HasColumnType("TEXT");

                    b.HasKey("MietMinderungId");

                    b.ToTable("MietMinderungen");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Miete", b =>
                {
                    b.Property<int>("MieteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Betrag")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("BetreffenderMonat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notiz")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VertragId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Zahlungsdatum")
                        .HasColumnType("TEXT");

                    b.HasKey("MieteId");

                    b.ToTable("Mieten");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Mieter", b =>
                {
                    b.Property<int>("MieterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VertragId")
                        .HasColumnType("TEXT");

                    b.HasKey("MieterId");

                    b.ToTable("MieterSet");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.NatuerlichePerson", b =>
                {
                    b.Property<int>("NatuerlichePersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdresseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Anrede")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fax")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobil")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notiz")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefon")
                        .HasColumnType("TEXT");

                    b.Property<int>("Titel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Vorname")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isHandwerker")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isMieter")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isVermieter")
                        .HasColumnType("INTEGER");

                    b.HasKey("NatuerlichePersonId");

                    b.HasAlternateKey("PersonId");

                    b.HasIndex("AdresseId");

                    b.ToTable("NatuerlichePersonen");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Vertrag", b =>
                {
                    b.Property<int>("rowid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("AnsprechpartnerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Beginn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Ende")
                        .HasColumnType("TEXT");

                    b.Property<double>("KaltMiete")
                        .HasColumnType("REAL");

                    b.Property<string>("Notiz")
                        .HasColumnType("TEXT");

                    b.Property<int>("Personenzahl")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VersionsNotiz")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VertragId")
                        .HasColumnType("TEXT");

                    b.Property<int>("WohnungId")
                        .HasColumnType("INTEGER");

                    b.HasKey("rowid");

                    b.HasAlternateKey("VertragId", "Version");

                    b.HasIndex("WohnungId");

                    b.ToTable("Vertraege");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.VertragsBetriebskostenrechnung", b =>
                {
                    b.Property<int>("VertragsBetriebskostenrechnungId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RechnungBetriebskostenrechnungId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("VertragId")
                        .HasColumnType("TEXT");

                    b.HasKey("VertragsBetriebskostenrechnungId");

                    b.HasIndex("RechnungBetriebskostenrechnungId");

                    b.ToTable("VertragsBetriebskostenrechnung");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Wohnung", b =>
                {
                    b.Property<int>("WohnungId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdresseId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("BesitzerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("JuristischePersonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notiz")
                        .HasColumnType("TEXT");

                    b.Property<int>("Nutzeinheit")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Nutzflaeche")
                        .HasColumnType("REAL");

                    b.Property<double>("Wohnflaeche")
                        .HasColumnType("REAL");

                    b.HasKey("WohnungId");

                    b.HasIndex("AdresseId");

                    b.HasIndex("JuristischePersonId");

                    b.ToTable("Wohnungen");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Zaehler", b =>
                {
                    b.Property<int>("ZaehlerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AllgemeinZaehlerZaehlerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Kennnummer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notiz")
                        .HasColumnType("TEXT");

                    b.Property<int>("Typ")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WohnungId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ZaehlerId");

                    b.HasIndex("AllgemeinZaehlerZaehlerId");

                    b.HasIndex("WohnungId");

                    b.ToTable("ZaehlerSet");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Zaehlerstand", b =>
                {
                    b.Property<int>("ZaehlerstandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notiz")
                        .HasColumnType("TEXT");

                    b.Property<double>("Stand")
                        .HasColumnType("REAL");

                    b.Property<int>("ZaehlerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ZaehlerstandId");

                    b.HasIndex("ZaehlerId");

                    b.ToTable("Zaehlerstaende");
                });

            modelBuilder.Entity("GarageVertrag", b =>
                {
                    b.Property<int>("GaragenGarageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Vertraegerowid")
                        .HasColumnType("INTEGER");

                    b.HasKey("GaragenGarageId", "Vertraegerowid");

                    b.HasIndex("Vertraegerowid");

                    b.ToTable("GarageVertrag");
                });

            modelBuilder.Entity("JuristischePersonJuristischePerson", b =>
                {
                    b.Property<int>("JuristischeMitgliederJuristischePersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JuristischePersonenJuristischePersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("JuristischeMitgliederJuristischePersonId", "JuristischePersonenJuristischePersonId");

                    b.HasIndex("JuristischePersonenJuristischePersonId");

                    b.ToTable("JuristischePersonJuristischePerson");
                });

            modelBuilder.Entity("JuristischePersonNatuerlichePerson", b =>
                {
                    b.Property<int>("JuristischePersonenJuristischePersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NatuerlicheMitgliederNatuerlichePersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("JuristischePersonenJuristischePersonId", "NatuerlicheMitgliederNatuerlichePersonId");

                    b.HasIndex("NatuerlicheMitgliederNatuerlichePersonId");

                    b.ToTable("JuristischePersonNatuerlichePerson");
                });

            modelBuilder.Entity("AdresseAnhang", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Adresse", null)
                        .WithMany()
                        .HasForeignKey("AdressenAdresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.Anhang", null)
                        .WithMany()
                        .HasForeignKey("AnhaengeAnhangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnhangBetriebskostenrechnung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Anhang", null)
                        .WithMany()
                        .HasForeignKey("AnhaengeAnhangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.Betriebskostenrechnung", null)
                        .WithMany()
                        .HasForeignKey("BetriebskostenrechnungenBetriebskostenrechnungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnhangErhaltungsaufwendung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Anhang", null)
                        .WithMany()
                        .HasForeignKey("AnhaengeAnhangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.Erhaltungsaufwendung", null)
                        .WithMany()
                        .HasForeignKey("ErhaltungsaufwendungenErhaltungsaufwendungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnhangGarage", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Anhang", null)
                        .WithMany()
                        .HasForeignKey("AnhaengeAnhangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.Garage", null)
                        .WithMany()
                        .HasForeignKey("GaragenGarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnhangJuristischePerson", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Anhang", null)
                        .WithMany()
                        .HasForeignKey("AnhaengeAnhangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.JuristischePerson", null)
                        .WithMany()
                        .HasForeignKey("JuristischePersonenJuristischePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnhangKonto", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Anhang", null)
                        .WithMany()
                        .HasForeignKey("AnhaengeAnhangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.Konto", null)
                        .WithMany()
                        .HasForeignKey("KontenKontoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnhangMietMinderung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Anhang", null)
                        .WithMany()
                        .HasForeignKey("AnhaengeAnhangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.MietMinderung", null)
                        .WithMany()
                        .HasForeignKey("MietminderungenMietMinderungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnhangMiete", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Anhang", null)
                        .WithMany()
                        .HasForeignKey("AnhaengeAnhangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.Miete", null)
                        .WithMany()
                        .HasForeignKey("MietenMieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnhangNatuerlichePerson", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Anhang", null)
                        .WithMany()
                        .HasForeignKey("AnhaengeAnhangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.NatuerlichePerson", null)
                        .WithMany()
                        .HasForeignKey("NatuerlichePersonenNatuerlichePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnhangVertrag", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Anhang", null)
                        .WithMany()
                        .HasForeignKey("AnhaengeAnhangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.Vertrag", null)
                        .WithMany()
                        .HasForeignKey("Vertraegerowid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnhangVertragsBetriebskostenrechnung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Anhang", null)
                        .WithMany()
                        .HasForeignKey("AnhaengeAnhangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.VertragsBetriebskostenrechnung", null)
                        .WithMany()
                        .HasForeignKey("VertragsBetriebskostenrechnungenVertragsBetriebskostenrechnungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnhangWohnung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Anhang", null)
                        .WithMany()
                        .HasForeignKey("AnhaengeAnhangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.Wohnung", null)
                        .WithMany()
                        .HasForeignKey("WohnungenWohnungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnhangZaehler", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Anhang", null)
                        .WithMany()
                        .HasForeignKey("AnhaengeAnhangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.Zaehler", null)
                        .WithMany()
                        .HasForeignKey("ZaehlerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnhangZaehlerstand", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Anhang", null)
                        .WithMany()
                        .HasForeignKey("AnhaengeAnhangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.Zaehlerstand", null)
                        .WithMany()
                        .HasForeignKey("ZaehlerstaendeZaehlerstandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BetriebskostenrechnungWohnung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Betriebskostenrechnung", null)
                        .WithMany()
                        .HasForeignKey("BetriebskostenrechnungenBetriebskostenrechnungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.Wohnung", null)
                        .WithMany()
                        .HasForeignKey("WohnungenWohnungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Betriebskostenrechnung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Zaehler", "Zaehler")
                        .WithMany()
                        .HasForeignKey("ZaehlerId");

                    b.Navigation("Zaehler");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Erhaltungsaufwendung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Wohnung", "Wohnung")
                        .WithMany("Erhaltungsaufwendungen")
                        .HasForeignKey("WohnungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wohnung");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Garage", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Adresse", "Adresse")
                        .WithMany("Garagen")
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.JuristischePerson", null)
                        .WithMany("Garagen")
                        .HasForeignKey("JuristischePersonId");

                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.JuristischePerson", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Adresse", "Adresse")
                        .WithMany()
                        .HasForeignKey("AdresseId");

                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.NatuerlichePerson", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Adresse", "Adresse")
                        .WithMany()
                        .HasForeignKey("AdresseId");

                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Vertrag", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Wohnung", "Wohnung")
                        .WithMany("Vertraege")
                        .HasForeignKey("WohnungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wohnung");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.VertragsBetriebskostenrechnung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Betriebskostenrechnung", "Rechnung")
                        .WithMany()
                        .HasForeignKey("RechnungBetriebskostenrechnungId");

                    b.Navigation("Rechnung");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Wohnung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Adresse", "Adresse")
                        .WithMany("Wohnungen")
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.JuristischePerson", null)
                        .WithMany("Wohnungen")
                        .HasForeignKey("JuristischePersonId");

                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Zaehler", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Zaehler", "AllgemeinZaehler")
                        .WithMany("EinzelZaehler")
                        .HasForeignKey("AllgemeinZaehlerZaehlerId");

                    b.HasOne("Deeplex.Saverwalter.Model.Wohnung", "Wohnung")
                        .WithMany("Zaehler")
                        .HasForeignKey("WohnungId");

                    b.Navigation("AllgemeinZaehler");

                    b.Navigation("Wohnung");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Zaehlerstand", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Zaehler", "Zaehler")
                        .WithMany("Staende")
                        .HasForeignKey("ZaehlerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zaehler");
                });

            modelBuilder.Entity("GarageVertrag", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Garage", null)
                        .WithMany()
                        .HasForeignKey("GaragenGarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.Vertrag", null)
                        .WithMany()
                        .HasForeignKey("Vertraegerowid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JuristischePersonJuristischePerson", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.JuristischePerson", null)
                        .WithMany()
                        .HasForeignKey("JuristischeMitgliederJuristischePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.JuristischePerson", null)
                        .WithMany()
                        .HasForeignKey("JuristischePersonenJuristischePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JuristischePersonNatuerlichePerson", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.JuristischePerson", null)
                        .WithMany()
                        .HasForeignKey("JuristischePersonenJuristischePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deeplex.Saverwalter.Model.NatuerlichePerson", null)
                        .WithMany()
                        .HasForeignKey("NatuerlicheMitgliederNatuerlichePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Adresse", b =>
                {
                    b.Navigation("Garagen");

                    b.Navigation("Wohnungen");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.JuristischePerson", b =>
                {
                    b.Navigation("Garagen");

                    b.Navigation("Wohnungen");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Wohnung", b =>
                {
                    b.Navigation("Erhaltungsaufwendungen");

                    b.Navigation("Vertraege");

                    b.Navigation("Zaehler");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Zaehler", b =>
                {
                    b.Navigation("EinzelZaehler");

                    b.Navigation("Staende");
                });
#pragma warning restore 612, 618
        }
    }
}
