// <auto-generated />
using System;
using Deeplex.Saverwalter.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Deeplex.Saverwalter.Model.Migrations.Npgsql
{
    [DbContext(typeof(SaverwalterContext))]
    [Migration("20231119113101_FixHKVORelationships")]
    partial class FixHKVORelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Adresse", b =>
                {
                    b.Property<int>("AdresseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("adresse_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdresseId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Hausnummer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hausnummer");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.Property<string>("Postleitzahl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postleitzahl");

                    b.Property<string>("Stadt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stadt");

                    b.Property<string>("Strasse")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("strasse");

                    b.HasKey("AdresseId")
                        .HasName("pk_adressen");

                    b.ToTable("adressen", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Auth.Pbkdf2PasswordCredential", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Iterations")
                        .HasColumnType("integer")
                        .HasColumnName("iterations");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_pbkdf2password_credentials");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_pbkdf2password_credentials_user_id");

                    b.ToTable("pbkdf2password_credentials", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Auth.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_user_accounts");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_user_accounts_username");

                    b.ToTable("user_accounts", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Betriebskostenrechnung", b =>
                {
                    b.Property<int>("BetriebskostenrechnungId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("betriebskostenrechnung_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BetriebskostenrechnungId"));

                    b.Property<double>("Betrag")
                        .HasColumnType("double precision")
                        .HasColumnName("betrag");

                    b.Property<int>("BetreffendesJahr")
                        .HasColumnType("integer")
                        .HasColumnName("betreffendes_jahr");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateOnly>("Datum")
                        .HasColumnType("date")
                        .HasColumnName("datum");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.Property<int>("UmlageId")
                        .HasColumnType("integer")
                        .HasColumnName("umlage_id");

                    b.HasKey("BetriebskostenrechnungId")
                        .HasName("pk_betriebskostenrechnungen");

                    b.HasIndex("UmlageId")
                        .HasDatabaseName("ix_betriebskostenrechnungen_umlage_id");

                    b.ToTable("betriebskostenrechnungen", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Erhaltungsaufwendung", b =>
                {
                    b.Property<int>("ErhaltungsaufwendungId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("erhaltungsaufwendung_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ErhaltungsaufwendungId"));

                    b.Property<Guid>("AusstellerId")
                        .HasColumnType("uuid")
                        .HasColumnName("aussteller_id");

                    b.Property<double>("Betrag")
                        .HasColumnType("double precision")
                        .HasColumnName("betrag");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bezeichnung");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateOnly>("Datum")
                        .HasColumnType("date")
                        .HasColumnName("datum");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.Property<int>("WohnungId")
                        .HasColumnType("integer")
                        .HasColumnName("wohnung_id");

                    b.HasKey("ErhaltungsaufwendungId")
                        .HasName("pk_erhaltungsaufwendungen");

                    b.HasIndex("WohnungId")
                        .HasDatabaseName("ix_erhaltungsaufwendungen_wohnung_id");

                    b.ToTable("erhaltungsaufwendungen", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Garage", b =>
                {
                    b.Property<int>("GarageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("garage_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GarageId"));

                    b.Property<int?>("AdresseId")
                        .HasColumnType("integer")
                        .HasColumnName("adresse_id");

                    b.Property<Guid>("BesitzerId")
                        .HasColumnType("uuid")
                        .HasColumnName("besitzer_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("JuristischePersonId")
                        .HasColumnType("integer")
                        .HasColumnName("juristische_person_id");

                    b.Property<string>("Kennung")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("kennung");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.HasKey("GarageId")
                        .HasName("pk_garagen");

                    b.HasIndex("AdresseId")
                        .HasDatabaseName("ix_garagen_adresse_id");

                    b.HasIndex("JuristischePersonId")
                        .HasDatabaseName("ix_garagen_juristische_person_id");

                    b.ToTable("garagen", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.HKVO", b =>
                {
                    b.Property<int>("HKVOId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("hkvo_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HKVOId"));

                    b.Property<int>("BetriebsstromUmlageId")
                        .HasColumnType("integer")
                        .HasColumnName("betriebsstrom_umlage_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<double>("HKVO_P7")
                        .HasColumnType("double precision")
                        .HasColumnName("hkvo_p7");

                    b.Property<double>("HKVO_P8")
                        .HasColumnType("double precision")
                        .HasColumnName("hkvo_p8");

                    b.Property<int>("HKVO_P9")
                        .HasColumnType("integer")
                        .HasColumnName("hkvo_p9");

                    b.Property<int>("HeizkostenId")
                        .HasColumnType("integer")
                        .HasColumnName("heizkosten_id");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.Property<double>("Strompauschale")
                        .HasColumnType("double precision")
                        .HasColumnName("strompauschale");

                    b.HasKey("HKVOId")
                        .HasName("pk_hkvo");

                    b.HasIndex("BetriebsstromUmlageId")
                        .HasDatabaseName("ix_hkvo_betriebsstrom_umlage_id");

                    b.HasIndex("HeizkostenId")
                        .IsUnique()
                        .HasDatabaseName("ix_hkvo_heizkosten_id");

                    b.ToTable("hkvo", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.JuristischePerson", b =>
                {
                    b.Property<int>("JuristischePersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("juristische_person_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JuristischePersonId"));

                    b.Property<int?>("AdresseId")
                        .HasColumnType("integer")
                        .HasColumnName("adresse_id");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bezeichnung");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Fax")
                        .HasColumnType("text")
                        .HasColumnName("fax");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Mobil")
                        .HasColumnType("text")
                        .HasColumnName("mobil");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<string>("Telefon")
                        .HasColumnType("text")
                        .HasColumnName("telefon");

                    b.HasKey("JuristischePersonId")
                        .HasName("pk_juristische_personen");

                    b.HasAlternateKey("PersonId")
                        .HasName("ak_juristische_personen_person_id");

                    b.HasIndex("AdresseId")
                        .HasDatabaseName("ix_juristische_personen_adresse_id");

                    b.ToTable("juristische_personen", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Konto", b =>
                {
                    b.Property<int>("KontoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("konto_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("KontoId"));

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iban");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.HasKey("KontoId")
                        .HasName("pk_kontos");

                    b.ToTable("kontos", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Miete", b =>
                {
                    b.Property<int>("MieteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("miete_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MieteId"));

                    b.Property<double>("Betrag")
                        .HasColumnType("double precision")
                        .HasColumnName("betrag");

                    b.Property<DateOnly>("BetreffenderMonat")
                        .HasColumnType("date")
                        .HasColumnName("betreffender_monat");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.Property<int>("VertragId")
                        .HasColumnType("integer")
                        .HasColumnName("vertrag_id");

                    b.Property<DateOnly>("Zahlungsdatum")
                        .HasColumnType("date")
                        .HasColumnName("zahlungsdatum");

                    b.HasKey("MieteId")
                        .HasName("pk_mieten");

                    b.HasIndex("VertragId")
                        .HasDatabaseName("ix_mieten_vertrag_id");

                    b.ToTable("mieten", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Mieter", b =>
                {
                    b.Property<int>("MieterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mieter_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MieterId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<int>("VertragId")
                        .HasColumnType("integer")
                        .HasColumnName("vertrag_id");

                    b.HasKey("MieterId")
                        .HasName("pk_mieter_set");

                    b.HasIndex("VertragId")
                        .HasDatabaseName("ix_mieter_set_vertrag_id");

                    b.ToTable("mieter_set", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Mietminderung", b =>
                {
                    b.Property<int>("MietminderungId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mietminderung_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MietminderungId"));

                    b.Property<DateOnly>("Beginn")
                        .HasColumnType("date")
                        .HasColumnName("beginn");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateOnly?>("Ende")
                        .HasColumnType("date")
                        .HasColumnName("ende");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<double>("Minderung")
                        .HasColumnType("double precision")
                        .HasColumnName("minderung");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.Property<int>("VertragId")
                        .HasColumnType("integer")
                        .HasColumnName("vertrag_id");

                    b.HasKey("MietminderungId")
                        .HasName("pk_mietminderungen");

                    b.HasIndex("VertragId")
                        .HasDatabaseName("ix_mietminderungen_vertrag_id");

                    b.ToTable("mietminderungen", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.NatuerlichePerson", b =>
                {
                    b.Property<int>("NatuerlichePersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("natuerliche_person_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NatuerlichePersonId"));

                    b.Property<int?>("AdresseId")
                        .HasColumnType("integer")
                        .HasColumnName("adresse_id");

                    b.Property<int>("Anrede")
                        .HasColumnType("integer")
                        .HasColumnName("anrede");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Fax")
                        .HasColumnType("text")
                        .HasColumnName("fax");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Mobil")
                        .HasColumnType("text")
                        .HasColumnName("mobil");

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nachname");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<string>("Telefon")
                        .HasColumnType("text")
                        .HasColumnName("telefon");

                    b.Property<int>("Titel")
                        .HasColumnType("integer")
                        .HasColumnName("titel");

                    b.Property<string>("Vorname")
                        .HasColumnType("text")
                        .HasColumnName("vorname");

                    b.HasKey("NatuerlichePersonId")
                        .HasName("pk_natuerliche_personen");

                    b.HasAlternateKey("PersonId")
                        .HasName("ak_natuerliche_personen_person_id");

                    b.HasIndex("AdresseId")
                        .HasDatabaseName("ix_natuerliche_personen_adresse_id");

                    b.ToTable("natuerliche_personen", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Umlage", b =>
                {
                    b.Property<int>("UmlageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("umlage_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UmlageId"));

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text")
                        .HasColumnName("beschreibung");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.Property<int>("Schluessel")
                        .HasColumnType("integer")
                        .HasColumnName("schluessel");

                    b.Property<int>("TypUmlagetypId")
                        .HasColumnType("integer")
                        .HasColumnName("typ_umlagetyp_id");

                    b.HasKey("UmlageId")
                        .HasName("pk_umlagen");

                    b.HasIndex("TypUmlagetypId")
                        .HasDatabaseName("ix_umlagen_typ_umlagetyp_id");

                    b.ToTable("umlagen", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Umlagetyp", b =>
                {
                    b.Property<int>("UmlagetypId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("umlagetyp_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UmlagetypId"));

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bezeichnung");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.HasKey("UmlagetypId")
                        .HasName("pk_umlagetypen");

                    b.ToTable("umlagetypen", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Vertrag", b =>
                {
                    b.Property<int>("VertragId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vertrag_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VertragId"));

                    b.Property<Guid?>("AnsprechpartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("ansprechpartner_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateOnly?>("Ende")
                        .HasColumnType("date")
                        .HasColumnName("ende");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.Property<int>("WohnungId")
                        .HasColumnType("integer")
                        .HasColumnName("wohnung_id");

                    b.HasKey("VertragId")
                        .HasName("pk_vertraege");

                    b.HasIndex("WohnungId")
                        .HasDatabaseName("ix_vertraege_wohnung_id");

                    b.ToTable("vertraege", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.VertragVersion", b =>
                {
                    b.Property<int>("VertragVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vertrag_version_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VertragVersionId"));

                    b.Property<DateOnly>("Beginn")
                        .HasColumnType("date")
                        .HasColumnName("beginn");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double>("Grundmiete")
                        .HasColumnType("double precision")
                        .HasColumnName("grundmiete");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.Property<int>("Personenzahl")
                        .HasColumnType("integer")
                        .HasColumnName("personenzahl");

                    b.Property<int>("VertragId")
                        .HasColumnType("integer")
                        .HasColumnName("vertrag_id");

                    b.HasKey("VertragVersionId")
                        .HasName("pk_vertrag_versionen");

                    b.HasIndex("VertragId")
                        .HasDatabaseName("ix_vertrag_versionen_vertrag_id");

                    b.ToTable("vertrag_versionen", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.VertragsBetriebskostenrechnung", b =>
                {
                    b.Property<int>("VertragsBetriebskostenrechnungId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vertrags_betriebskostenrechnung_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VertragsBetriebskostenrechnungId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("RechnungBetriebskostenrechnungId")
                        .HasColumnType("integer")
                        .HasColumnName("rechnung_betriebskostenrechnung_id");

                    b.Property<int>("VertragId")
                        .HasColumnType("integer")
                        .HasColumnName("vertrag_id");

                    b.HasKey("VertragsBetriebskostenrechnungId")
                        .HasName("pk_vertrags_betriebskostenrechnung");

                    b.HasIndex("RechnungBetriebskostenrechnungId")
                        .HasDatabaseName("ix_vertrags_betriebskostenrechnung_rechnung_betriebskostenrech");

                    b.HasIndex("VertragId")
                        .HasDatabaseName("ix_vertrags_betriebskostenrechnung_vertrag_id");

                    b.ToTable("vertrags_betriebskostenrechnung", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Wohnung", b =>
                {
                    b.Property<int>("WohnungId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("wohnung_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WohnungId"));

                    b.Property<int?>("AdresseId")
                        .HasColumnType("integer")
                        .HasColumnName("adresse_id");

                    b.Property<Guid>("BesitzerId")
                        .HasColumnType("uuid")
                        .HasColumnName("besitzer_id");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bezeichnung");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("JuristischePersonId")
                        .HasColumnType("integer")
                        .HasColumnName("juristische_person_id");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.Property<int>("Nutzeinheit")
                        .HasColumnType("integer")
                        .HasColumnName("nutzeinheit");

                    b.Property<double>("Nutzflaeche")
                        .HasColumnType("double precision")
                        .HasColumnName("nutzflaeche");

                    b.Property<double>("Wohnflaeche")
                        .HasColumnType("double precision")
                        .HasColumnName("wohnflaeche");

                    b.HasKey("WohnungId")
                        .HasName("pk_wohnungen");

                    b.HasIndex("AdresseId")
                        .HasDatabaseName("ix_wohnungen_adresse_id");

                    b.HasIndex("JuristischePersonId")
                        .HasDatabaseName("ix_wohnungen_juristische_person_id");

                    b.ToTable("wohnungen", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Zaehler", b =>
                {
                    b.Property<int>("ZaehlerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("zaehler_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ZaehlerId"));

                    b.Property<int?>("AdresseId")
                        .HasColumnType("integer")
                        .HasColumnName("adresse_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateOnly?>("Ende")
                        .HasColumnType("date")
                        .HasColumnName("ende");

                    b.Property<string>("Kennnummer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("kennnummer");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.Property<int>("Typ")
                        .HasColumnType("integer")
                        .HasColumnName("typ");

                    b.Property<int?>("WohnungId")
                        .HasColumnType("integer")
                        .HasColumnName("wohnung_id");

                    b.HasKey("ZaehlerId")
                        .HasName("pk_zaehler_set");

                    b.HasIndex("AdresseId")
                        .HasDatabaseName("ix_zaehler_set_adresse_id");

                    b.HasIndex("WohnungId")
                        .HasDatabaseName("ix_zaehler_set_wohnung_id");

                    b.ToTable("zaehler_set", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Zaehlerstand", b =>
                {
                    b.Property<int>("ZaehlerstandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("zaehlerstand_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ZaehlerstandId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateOnly>("Datum")
                        .HasColumnType("date")
                        .HasColumnName("datum");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Notiz")
                        .HasColumnType("text")
                        .HasColumnName("notiz");

                    b.Property<double>("Stand")
                        .HasColumnType("double precision")
                        .HasColumnName("stand");

                    b.Property<int>("ZaehlerId")
                        .HasColumnType("integer")
                        .HasColumnName("zaehler_id");

                    b.HasKey("ZaehlerstandId")
                        .HasName("pk_zaehlerstaende");

                    b.HasIndex("ZaehlerId")
                        .HasDatabaseName("ix_zaehlerstaende_zaehler_id");

                    b.ToTable("zaehlerstaende", (string)null);
                });

            modelBuilder.Entity("GarageVertrag", b =>
                {
                    b.Property<int>("GaragenGarageId")
                        .HasColumnType("integer")
                        .HasColumnName("garagen_garage_id");

                    b.Property<int>("VertraegeVertragId")
                        .HasColumnType("integer")
                        .HasColumnName("vertraege_vertrag_id");

                    b.HasKey("GaragenGarageId", "VertraegeVertragId")
                        .HasName("pk_garage_vertrag");

                    b.HasIndex("VertraegeVertragId")
                        .HasDatabaseName("ix_garage_vertrag_vertraege_vertrag_id");

                    b.ToTable("garage_vertrag", (string)null);
                });

            modelBuilder.Entity("JuristischePersonJuristischePerson", b =>
                {
                    b.Property<int>("JuristischeMitgliederJuristischePersonId")
                        .HasColumnType("integer")
                        .HasColumnName("juristische_mitglieder_juristische_person_id");

                    b.Property<int>("JuristischePersonenJuristischePersonId")
                        .HasColumnType("integer")
                        .HasColumnName("juristische_personen_juristische_person_id");

                    b.HasKey("JuristischeMitgliederJuristischePersonId", "JuristischePersonenJuristischePersonId")
                        .HasName("pk_juristische_person_juristische_person");

                    b.HasIndex("JuristischePersonenJuristischePersonId")
                        .HasDatabaseName("ix_juristische_person_juristische_person_juristische_personen_");

                    b.ToTable("juristische_person_juristische_person", (string)null);
                });

            modelBuilder.Entity("JuristischePersonNatuerlichePerson", b =>
                {
                    b.Property<int>("JuristischePersonenJuristischePersonId")
                        .HasColumnType("integer")
                        .HasColumnName("juristische_personen_juristische_person_id");

                    b.Property<int>("NatuerlicheMitgliederNatuerlichePersonId")
                        .HasColumnType("integer")
                        .HasColumnName("natuerliche_mitglieder_natuerliche_person_id");

                    b.HasKey("JuristischePersonenJuristischePersonId", "NatuerlicheMitgliederNatuerlichePersonId")
                        .HasName("pk_juristische_person_natuerliche_person");

                    b.HasIndex("NatuerlicheMitgliederNatuerlichePersonId")
                        .HasDatabaseName("ix_juristische_person_natuerliche_person_natuerliche_mitgliede");

                    b.ToTable("juristische_person_natuerliche_person", (string)null);
                });

            modelBuilder.Entity("UmlageWohnung", b =>
                {
                    b.Property<int>("UmlagenUmlageId")
                        .HasColumnType("integer")
                        .HasColumnName("umlagen_umlage_id");

                    b.Property<int>("WohnungenWohnungId")
                        .HasColumnType("integer")
                        .HasColumnName("wohnungen_wohnung_id");

                    b.HasKey("UmlagenUmlageId", "WohnungenWohnungId")
                        .HasName("pk_umlage_wohnung");

                    b.HasIndex("WohnungenWohnungId")
                        .HasDatabaseName("ix_umlage_wohnung_wohnungen_wohnung_id");

                    b.ToTable("umlage_wohnung", (string)null);
                });

            modelBuilder.Entity("UmlageZaehler", b =>
                {
                    b.Property<int>("UmlagenUmlageId")
                        .HasColumnType("integer")
                        .HasColumnName("umlagen_umlage_id");

                    b.Property<int>("ZaehlerId")
                        .HasColumnType("integer")
                        .HasColumnName("zaehler_id");

                    b.HasKey("UmlagenUmlageId", "ZaehlerId")
                        .HasName("pk_umlage_zaehler");

                    b.HasIndex("ZaehlerId")
                        .HasDatabaseName("ix_umlage_zaehler_zaehler_id");

                    b.ToTable("umlage_zaehler", (string)null);
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Auth.Pbkdf2PasswordCredential", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Auth.UserAccount", "User")
                        .WithOne("Pbkdf2PasswordCredential")
                        .HasForeignKey("Deeplex.Saverwalter.Model.Auth.Pbkdf2PasswordCredential", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pbkdf2password_credentials_user_accounts_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Betriebskostenrechnung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Umlage", "Umlage")
                        .WithMany("Betriebskostenrechnungen")
                        .HasForeignKey("UmlageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_betriebskostenrechnungen_umlagen_umlage_id");

                    b.Navigation("Umlage");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Erhaltungsaufwendung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Wohnung", "Wohnung")
                        .WithMany("Erhaltungsaufwendungen")
                        .HasForeignKey("WohnungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_erhaltungsaufwendungen_wohnungen_wohnung_id");

                    b.Navigation("Wohnung");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Garage", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Adresse", "Adresse")
                        .WithMany("Garagen")
                        .HasForeignKey("AdresseId")
                        .HasConstraintName("fk_garagen_adressen_adresse_id");

                    b.HasOne("Deeplex.Saverwalter.Model.JuristischePerson", null)
                        .WithMany("Garagen")
                        .HasForeignKey("JuristischePersonId")
                        .HasConstraintName("fk_garagen_juristische_personen_juristische_person_id");

                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.HKVO", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Umlage", "Betriebsstrom")
                        .WithMany("HKVOs")
                        .HasForeignKey("BetriebsstromUmlageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hkvo_umlagen_betriebsstrom_umlage_id");

                    b.HasOne("Deeplex.Saverwalter.Model.Umlage", "Heizkosten")
                        .WithOne("HKVO")
                        .HasForeignKey("Deeplex.Saverwalter.Model.HKVO", "HeizkostenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hkvo_umlagen_heizkosten_id");

                    b.Navigation("Betriebsstrom");

                    b.Navigation("Heizkosten");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.JuristischePerson", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Adresse", "Adresse")
                        .WithMany("JuristischePersonen")
                        .HasForeignKey("AdresseId")
                        .HasConstraintName("fk_juristische_personen_adressen_adresse_id");

                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Miete", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Vertrag", "Vertrag")
                        .WithMany("Mieten")
                        .HasForeignKey("VertragId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mieten_vertraege_vertrag_id");

                    b.Navigation("Vertrag");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Mieter", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Vertrag", "Vertrag")
                        .WithMany("Mieter")
                        .HasForeignKey("VertragId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mieter_set_vertraege_vertrag_id");

                    b.Navigation("Vertrag");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Mietminderung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Vertrag", "Vertrag")
                        .WithMany("Mietminderungen")
                        .HasForeignKey("VertragId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mietminderungen_vertraege_vertrag_id");

                    b.Navigation("Vertrag");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.NatuerlichePerson", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Adresse", "Adresse")
                        .WithMany("NatuerlichePersonen")
                        .HasForeignKey("AdresseId")
                        .HasConstraintName("fk_natuerliche_personen_adressen_adresse_id");

                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Umlage", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Umlagetyp", "Typ")
                        .WithMany("Umlagen")
                        .HasForeignKey("TypUmlagetypId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_umlagen_umlagetypen_typ_umlagetyp_id");

                    b.Navigation("Typ");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Vertrag", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Wohnung", "Wohnung")
                        .WithMany("Vertraege")
                        .HasForeignKey("WohnungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vertraege_wohnungen_wohnung_id");

                    b.Navigation("Wohnung");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.VertragVersion", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Vertrag", "Vertrag")
                        .WithMany("Versionen")
                        .HasForeignKey("VertragId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vertrag_versionen_vertraege_vertrag_id");

                    b.Navigation("Vertrag");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.VertragsBetriebskostenrechnung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Betriebskostenrechnung", "Rechnung")
                        .WithMany()
                        .HasForeignKey("RechnungBetriebskostenrechnungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vertrags_betriebskostenrechnung_betriebskostenrechnungen_re");

                    b.HasOne("Deeplex.Saverwalter.Model.Vertrag", "Vertrag")
                        .WithMany()
                        .HasForeignKey("VertragId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vertrags_betriebskostenrechnung_vertraege_vertrag_id");

                    b.Navigation("Rechnung");

                    b.Navigation("Vertrag");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Wohnung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Adresse", "Adresse")
                        .WithMany("Wohnungen")
                        .HasForeignKey("AdresseId")
                        .HasConstraintName("fk_wohnungen_adressen_adresse_id");

                    b.HasOne("Deeplex.Saverwalter.Model.JuristischePerson", null)
                        .WithMany("Wohnungen")
                        .HasForeignKey("JuristischePersonId")
                        .HasConstraintName("fk_wohnungen_juristische_personen_juristische_person_id");

                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Zaehler", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Adresse", "Adresse")
                        .WithMany("Zaehler")
                        .HasForeignKey("AdresseId")
                        .HasConstraintName("fk_zaehler_set_adressen_adresse_id");

                    b.HasOne("Deeplex.Saverwalter.Model.Wohnung", "Wohnung")
                        .WithMany("Zaehler")
                        .HasForeignKey("WohnungId")
                        .HasConstraintName("fk_zaehler_set_wohnungen_wohnung_id");

                    b.Navigation("Adresse");

                    b.Navigation("Wohnung");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Zaehlerstand", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Zaehler", "Zaehler")
                        .WithMany("Staende")
                        .HasForeignKey("ZaehlerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_zaehlerstaende_zaehler_set_zaehler_id");

                    b.Navigation("Zaehler");
                });

            modelBuilder.Entity("GarageVertrag", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Garage", null)
                        .WithMany()
                        .HasForeignKey("GaragenGarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_garage_vertrag_garagen_garagen_garage_id");

                    b.HasOne("Deeplex.Saverwalter.Model.Vertrag", null)
                        .WithMany()
                        .HasForeignKey("VertraegeVertragId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_garage_vertrag_vertraege_vertraege_vertrag_id");
                });

            modelBuilder.Entity("JuristischePersonJuristischePerson", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.JuristischePerson", null)
                        .WithMany()
                        .HasForeignKey("JuristischeMitgliederJuristischePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_juristische_person_juristische_person_juristische_personen_");

                    b.HasOne("Deeplex.Saverwalter.Model.JuristischePerson", null)
                        .WithMany()
                        .HasForeignKey("JuristischePersonenJuristischePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_juristische_person_juristische_person_juristische_personen_1");
                });

            modelBuilder.Entity("JuristischePersonNatuerlichePerson", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.JuristischePerson", null)
                        .WithMany()
                        .HasForeignKey("JuristischePersonenJuristischePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_juristische_person_natuerliche_person_juristische_personen_");

                    b.HasOne("Deeplex.Saverwalter.Model.NatuerlichePerson", null)
                        .WithMany()
                        .HasForeignKey("NatuerlicheMitgliederNatuerlichePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_juristische_person_natuerliche_person_natuerliche_personen_");
                });

            modelBuilder.Entity("UmlageWohnung", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Umlage", null)
                        .WithMany()
                        .HasForeignKey("UmlagenUmlageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_umlage_wohnung_umlagen_umlagen_umlage_id");

                    b.HasOne("Deeplex.Saverwalter.Model.Wohnung", null)
                        .WithMany()
                        .HasForeignKey("WohnungenWohnungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_umlage_wohnung_wohnungen_wohnungen_wohnung_id");
                });

            modelBuilder.Entity("UmlageZaehler", b =>
                {
                    b.HasOne("Deeplex.Saverwalter.Model.Umlage", null)
                        .WithMany()
                        .HasForeignKey("UmlagenUmlageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_umlage_zaehler_umlagen_umlagen_umlage_id");

                    b.HasOne("Deeplex.Saverwalter.Model.Zaehler", null)
                        .WithMany()
                        .HasForeignKey("ZaehlerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_umlage_zaehler_zaehler_set_zaehler_id");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Adresse", b =>
                {
                    b.Navigation("Garagen");

                    b.Navigation("JuristischePersonen");

                    b.Navigation("NatuerlichePersonen");

                    b.Navigation("Wohnungen");

                    b.Navigation("Zaehler");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Auth.UserAccount", b =>
                {
                    b.Navigation("Pbkdf2PasswordCredential");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.JuristischePerson", b =>
                {
                    b.Navigation("Garagen");

                    b.Navigation("Wohnungen");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Umlage", b =>
                {
                    b.Navigation("Betriebskostenrechnungen");

                    b.Navigation("HKVO");

                    b.Navigation("HKVOs");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Umlagetyp", b =>
                {
                    b.Navigation("Umlagen");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Vertrag", b =>
                {
                    b.Navigation("Mieten");

                    b.Navigation("Mieter");

                    b.Navigation("Mietminderungen");

                    b.Navigation("Versionen");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Wohnung", b =>
                {
                    b.Navigation("Erhaltungsaufwendungen");

                    b.Navigation("Vertraege");

                    b.Navigation("Zaehler");
                });

            modelBuilder.Entity("Deeplex.Saverwalter.Model.Zaehler", b =>
                {
                    b.Navigation("Staende");
                });
#pragma warning restore 612, 618
        }
    }
}
